@import { ReducerFile } from '../../../derive/model';
@import { importsGenerator, disclaimer, isLast } from '..';
@import { reducerActionGenerator, childReducerGenerator } from '.';
@parameters file: ReducerFile
@exportname reducerGenerator

@[disclaimer()]
@[importsGenerator(file.imports)]
@eol
type actor = (prev: @file.stateName, action: { type: string }) => @file.stateName;
const map = {};
@foreach(let child of file.childReducers){
@eol
@[childReducerGenerator(child, file)]
}
@foreach(let action of file.actions){
@eol
@[reducerActionGenerator(action, file)]
}
@eol
@if(!file.initFields.length){
export const @(file.stateName)Init = init;
} else {
export function @(file.stateName)Init(): @file.stateName {
  return {
 @foreach(let field of file.initFields){
   @if(field.isNull){
     @field.field: null@if(!isLast(field, file.initFields)){,}
   } else {
     @field.field: @(field.stateName)Init()@if(!isLast(field, file.initFields)){,}
   }
 }
  @};
@}
}
@eol
export function @(file.stateName)Reducer(prev: @file.stateName = @(file.stateName)Init(), action: { type: string }): @file.stateName {
  const specificReducer = map[action.type];
  return (specificReducer && specificReducer(prev, action)) || prev;
}
@eol
export const  @(file.stateName)Reduceable = [
@foreach(let exported of file.exportedActions) {
  ...@exported@if(!isLast(exported, file.exportedActions)){,}
}
];
