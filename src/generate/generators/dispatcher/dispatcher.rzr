@import { DispatcherFile } from '../../../derive/model';
@import { importsGenerator, disclaimer, isLast } from '..';
@import { dispatcherActionGenerator } from '.';
@parameters file: DispatcherFile
@exportname dispatcherGenerator

@[disclaimer()]
@[importsGenerator(file.imports)]

export interface IAction { type: string; }
export interface IReduxService {
  dispatch: (action: IAction) => void;
 @if(file.canSubscribe) {
  getState: () => @file.rootStateName;
  subscribe: (subscription: (state: @file.rootStateName) => void) => void;
 }
}
 @if(file.canSubscribe) {
@eol
export function selector(state: @file.rootStateName): @file.stateName {
  return state@file.traceToRoot;
@}
 }
@eol
export class @(file.stateName)DispatcherImpl {
  constructor(private service: IReduxService) {
  }
 @if(file.canSubscribe) {
@eol
  getState(): @file.stateName {
    return selector(this.service.getState());
  @}
@eol
  subscribe(subscription: (state: @file.stateName) => void): void {
    this.service.subscribe(state => subscription(selector(state)));
  @}
 }
 @foreach(let action of file.actions){
@eol
  @[dispatcherActionGenerator(action)]
 }
}